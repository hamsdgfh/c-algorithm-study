name: Auto update README index (grouped raw/clean + recent)

on:
  push:
    branches: [ "main" ]
    paths:
      - "baekjoon/**"
      - "programmers/**"
      - "swea/**"
      - ".github/workflows/auto-readme.yml"
      - "README.md"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    env:
      LANG: C.UTF-8
      LC_ALL: C.UTF-8

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate grouped index (collapsible; no pipe to sort)
        shell: bash
        run: |
          set -euo pipefail

          echo "[DEBUG] Listing directories..."
          find baekjoon    -maxdepth 4 -print 2>/dev/null || true
          find programmers -maxdepth 4 -print 2>/dev/null || true
          find swea        -maxdepth 4 -print 2>/dev/null || true

          link_if() { # $1 = path, $2 = label
            if [ -f "$1" ]; then
              printf '[%s](%s)' "$2" "$1"
            fi
          }

          # Ï†ïÎ†¨ÏùÑ ÏûÑÏãúÌååÏùºÎ°ú Ï≤òÎ¶¨Ìï¥ ÌååÏù¥ÌîÑÎ•º Ï†úÍ±∞
          sorted_to_file() { # $1: command string -> writes sorted lines to a tmp file, prints tmp path
            local _tmp; _tmp="$(mktemp)"
            # shellcheck disable=SC2086
            bash -lc "$1" | LC_ALL=C sort > \"$_tmp\" 2>/dev/null || true
            echo "$_tmp"
          }

          # Ïù∏Îç±Ïä§Ïóê Ìè¨Ìï®Ìï† Îã®Ïùº ÌååÏùº ÌôïÏû•Ïûê (ÌïÑÏöîÏãú Ï∂îÍ∞Ä/ÏÇ≠Ï†ú)
          EXTS='\( -name "*.c" -o -name "*.cpp" -o -name "*.cc" -o -name "*.py" -o -name "*.java" -o -name "*.js" -o -name "*.ts" -o -name "*.kt" -o -name "*.rs" -o -name "*.go" \)'

          list_grouped() {
            local ROOT=$1    # baekjoon / programmers / swea
            local LABEL=$2   # Baekjoon / Programmers / SW Expert Academy

            [ -d "$ROOT" ] || { echo "## $LABEL"; echo "- (ÏïÑÏßÅ ÏóÜÏùå)"; echo; return 0; }
            echo "## $LABEL"

            # Í∑∏Î£π(Ìã∞Ïñ¥/Î†àÎ≤®) Î™©Î°ù ÏàòÏßë
            local tmp1 tmp2
            tmp1="$(sorted_to_file "find \"$ROOT\" -type d -mindepth 2 -maxdepth 3 -printf '%P\n' 2>/dev/null | awk -F/ 'NF>=2{print \$1}'")"
            tmp2="$(sorted_to_file "find \"$ROOT\" -type f -mindepth 1 -maxdepth 3 2>/dev/null | awk -F/ 'NF>=2{print \$2}'")"

            # Î≥ëÌï© Ïú†ÎãàÌÅ¨
            local tmp_groups; tmp_groups="$(mktemp)"
            cat "$tmp1" "$tmp2" 2>/dev/null | sed '/^$/d' | LC_ALL=C sort -u > "$tmp_groups" || true
            rm -f "$tmp1" "$tmp2"

            if ! [ -s "$tmp_groups" ]; then
              echo "- (ÏïÑÏßÅ ÏóÜÏùå)"
              echo
              rm -f "$tmp_groups"
              return 0
            fi

            while IFS= read -r g; do
              [ -z "${g:-}" ] && continue

              # Ìï≠Î™©Ïàò ÏßëÍ≥Ñ
              local count
              count=$(
                { find "$ROOT/$g" -type d -mindepth 1 -maxdepth 2 2>/dev/null; \
                  eval find "$ROOT/$g" -type f -mindepth 0 -maxdepth 2 $EXTS 2>/dev/null; } \
                | wc -l | tr -d ' '
              )

              echo "<details><summary><strong>${g}</strong> <sub>(${count})</sub></summary>"
              echo

              # Ìè¥ÎçîÌòï Î™©Î°ù
              local tmp_dirs; tmp_dirs="$(sorted_to_file "find \"$ROOT/$g\" -type d -mindepth 1 -maxdepth 2 2>/dev/null")"
              while IFS= read -r d; do
                [ -z "${d:-}" ] && continue
                title="$(basename "$d")"
                raw_link="$(link_if "$d/raw.c" raw || true)"
                clean_link="$(link_if "$d/clean.c" clean || true)"
                note_link="$(link_if "$d/note.md" note || true)"
                out=""; dot=""
                [ -n "$raw_link" ]   && { out="$raw_link";              dot=" ‚Ä¢ "; }
                [ -n "$clean_link" ] && { out="${out}${dot}$clean_link"; dot=" ‚Ä¢ "; }
                [ -n "$note_link" ]  && { out="${out}${dot}$note_link"; }
                printf -- "- **[%s](%s)** ‚Äî %s\n" "$title" "$d" "${out:-ÏóÜÏùå}"
              done < "$tmp_dirs"
              rm -f "$tmp_dirs"

              # Îã®Ïùº ÌååÏùºÌòï Î™©Î°ù
              local tmp_files; tmp_files="$(sorted_to_file "eval find \"$ROOT/$g\" -type f -mindepth 0 -maxdepth 2 $EXTS 2>/dev/null")"
              while IFS= read -r f; do
                [ -z "${f:-}" ] && continue
                name="$(basename "$f")"
                printf -- "- [%s](%s)\n" "$name" "$f"
              done < "$tmp_files"
              rm -f "$tmp_files"

              echo
              echo "</details>"
              echo
            done < "$tmp_groups"
            rm -f "$tmp_groups"
          }

          {
            list_grouped baekjoon "Baekjoon"
            list_grouped programmers "Programmers"
            list_grouped swea "SW Expert Academy"
          } > _AUTO_INDEX.md

          echo "=== _AUTO_INDEX.md (preview top) ==="
          sed -n '1,120p' _AUTO_INDEX.md || true

      - name: Generate recent commits (last 10)
        shell: bash
        run: |
          set -euo pipefail
          REPO_URL="${GITHUB_SERVER_URL:-https://github.com}/${GITHUB_REPOSITORY}"
          git log --date=short --pretty=format:'- %ad ¬∑ %s ([%h]('"$REPO_URL"'/commit/%H))' -n 10 -- baekjoon programmers swea > _RECENT.md || true
          if [ ! -s _RECENT.md ]; then
            echo "- (ÏµúÍ∑º Î≥ÄÍ≤Ω ÏóÜÏùå)" > _RECENT.md
          fi
          echo "=== _RECENT.md ==="
          cat _RECENT.md

      - name: Update README between markers (robust + quick filters header)
        shell: bash
        run: |
          set -euo pipefail

          START="<!-- AUTO-INDEX:START -->"
          END="<!-- AUTO-INDEX:END -->"
          RSTART="<!-- RECENT:START -->"
          REND="<!-- RECENT:END -->"

          [ -f _AUTO_INDEX.md ] || : > _AUTO_INDEX.md
          [ -f _RECENT.md ]     || : > _RECENT.md

          REPO_URL="${GITHUB_SERVER_URL:-https://github.com}/${GITHUB_REPOSITORY}"

          # README Í∏∞Î≥∏ Í≥®Í≤© + ÏÉÅÎã® ÌÄµ ÌïÑÌÑ∞/Îã®Ï∂ïÌÇ§
          if [ ! -f README.md ]; then
            {
              printf "%s\n" "# C Algorithm Study"
              printf "\n"
              printf "%s\n" "### üîé Quick Filters & ‚å®Ô∏è Shortcuts"
              printf "%s\n" "- **Í≤ÄÏÉâ Îã®Ï∂ïÌÇ§**: \`/\` Í≤ÄÏÉâ Ìè¨Ïª§Ïä§, \`t\` ÌååÏùº ÌÉêÏÉâÍ∏∞, \`g\`‚Üí\`i\` Ïù¥ÏäàÎ°ú Ïù¥Îèô"
              printf "%s\n" "- **Ïñ∏Ïñ¥Î≥Ñ Îπ†Î•∏ Í≤ÄÏÉâ**: [C](%s/search?q=extension%%3Ac+path%%3Abaekjoon+OR+path%%3Aprogrammers+OR+path%%3Aswea) ¬∑ [C++](%s/search?q=extension%%3Acpp) ¬∑ [Python](%s/search?q=extension%%3Apy) ¬∑ [Java](%s/search?q=extension%%3Ajava)" "$REPO_URL" "$REPO_URL" "$REPO_URL" "$REPO_URL"
              printf "%s\n" "- **Ìè¥ÎçîÎ≥Ñ Îπ†Î•∏ Í≤ÄÏÉâ**: [Baekjoon](%s/search?q=path%%3Abaekjoon) ¬∑ [Programmers](%s/search?q=path%%3Aprogrammers) ¬∑ [SWEA](%s/search?q=path%%3Aswea)" "$REPO_URL" "$REPO_URL" "$REPO_URL"
              printf "\n"
              printf "%s\n" "## üÜï ÏµúÍ∑º ÏóÖÎç∞Ïù¥Ìä∏ (ÏûêÎèô)"
              printf "%s\n" "$RSTART"
              printf "%s\n" "- (ÏµúÍ∑º Î≥ÄÍ≤Ω ÏóÜÏùå)"
              printf "%s\n" "$REND"
              printf "\n"
              printf "%s\n" "## üóÇÔ∏è Î¨∏Ï†ú Î™©Î°ù (ÏûêÎèô ÏÉùÏÑ±)"
              printf "%s\n" "$START"
              printf "%s\n" "_ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±Îê©ÎãàÎã§. Ìã∞Ïñ¥/Î†àÎ≤®Î≥Ñ Ï†ëÍ∏∞ ÏßÄÏõê_"
              printf "%s\n" "$END"
            } > README.md
          fi

          # ÏÉÅÎã® Quick Filters & Shortcuts Î∏îÎ°ù ÏóÜÏúºÎ©¥ ÏÇΩÏûÖ
          if ! grep -q "Quick Filters & .*Shortcuts" README.md; then
            tmp_head="$(mktemp)"
            {
              printf "%s\n" "### üîé Quick Filters & ‚å®Ô∏è Shortcuts"
              printf "%s\n" "- **Í≤ÄÏÉâ Îã®Ï∂ïÌÇ§**: \`/\` Í≤ÄÏÉâ Ìè¨Ïª§Ïä§, \`t\` ÌååÏùº ÌÉêÏÉâÍ∏∞, \`g\`‚Üí\`i\` Ïù¥ÏäàÎ°ú Ïù¥Îèô"
              printf "%s\n" "- **Ïñ∏Ïñ¥Î≥Ñ Îπ†Î•∏ Í≤ÄÏÉâ**: [C](%s/search?q=extension%%3Ac+path%%3Abaekjoon+OR+path%%3Aprogrammers+OR+path%%3Aswea) ¬∑ [C++](%s/search?q=extension%%3Acpp) ¬∑ [Python](%s/search?q=extension%%3Apy) ¬∑ [Java](%s/search?q=extension%%3Ajava)" "$REPO_URL" "$REPO_URL" "$REPO_URL" "$REPO_URL"
              printf "%s\n" "- **Ìè¥ÎçîÎ≥Ñ Îπ†Î•∏ Í≤ÄÏÉâ**: [Baekjoon](%s/search?q=path%%3Abaekjoon) ¬∑ [Programmers](%s/search?q=path%%3Aprogrammers) ¬∑ [SWEA](%s/search?q=path%%3Aswea)" "$REPO_URL" "$REPO_URL" "$REPO_URL"
              printf "\n"
            } > "$tmp_head"
            awk -v ins="$(sed 's/[&/\]/\\&/g' "$tmp_head")" '
              NR==1{print;next}
              NR==2{print ins}
              {print}
            ' README.md > README.tmp && mv README.tmp README.md
            rm -f "$tmp_head"
          fi

          # ÎßàÏª§ Î≥¥Ï†ï
          grep -qF "$RSTART" README.md || printf "\n## üÜï ÏµúÍ∑º ÏóÖÎç∞Ïù¥Ìä∏ (ÏûêÎèô)\n%s\n- (ÏµúÍ∑º Î≥ÄÍ≤Ω ÏóÜÏùå)\n%s\n" "$RSTART" "$REND" >> README.md
          grep -qF "$REND"   README.md || echo "$REND" >> README.md
          grep -qF "$START"  README.md || printf "\n## üóÇÔ∏è Î¨∏Ï†ú Î™©Î°ù (ÏûêÎèô ÏÉùÏÑ±)\n%s\n_ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±Îê©ÎãàÎã§. Ìã∞Ïñ¥/Î†àÎ≤®Î≥Ñ Ï†ëÍ∏∞ ÏßÄÏõê_\n%s\n" "$START" "$END" >> README.md
          grep -qF "$END"    README.md || echo "$END" >> README.md

          # ÏµúÍ∑º ÏóÖÎç∞Ïù¥Ìä∏ ÏπòÌôò
          awk -v s="$RSTART" -v e="$REND" '
            BEGIN{p=1}
            $0 ~ s { print; system("cat _RECENT.md"); p=0; next }
            $0 ~ e { p=1 }
            p { print }
          ' README.md > README.tmp && mv README.tmp README.md

          # Ïù∏Îç±Ïä§ ÏπòÌôò
          awk -v s="$START" -v e="$END" '
            BEGIN{p=1}
            $0 ~ s { print; system("cat _AUTO_INDEX.md"); p=0; next }
            $0 ~ e { p=1 }
            p { print }
          ' README.md > README.new && mv README.new README.md

      - name: Commit & push if changed
        shell: bash
        run: |
          set -euo pipefail
          if git diff --quiet; then
            echo "No changes in README."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          g
