name: Auto update README index (grouped raw/clean)

on:
  push:
    branches: [ "main" ]
    paths:
      - "baekjoon/**"
      - "programmers/**"
      - "swea/**"
      - ".github/workflows/auto-readme.yml"
      - "README.md"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    env:
      LANG: C.UTF-8
      LC_ALL: C.UTF-8

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate grouped index (robust; no pipe to sort)
        shell: bash
        run: |
          set -euo pipefail

          echo "[DEBUG] Listing directories for BOJ/PGS/SWEA..."
          find baekjoon    -maxdepth 3 -print 2>/dev/null || true
          find programmers -maxdepth 3 -print 2>/dev/null || true
          find swea        -maxdepth 3 -print 2>/dev/null || true

          link_if() {
            # $1 = path, $2 = label
            if [ -f "$1" ]; then
              printf '[%s](%s)' "$2" "$1"
            fi
          }

          sort_to() {
            local _tmp; _tmp="$(mktemp)"
            cat - | LC_ALL=C sort > "$_tmp" 2>/dev/null || true
            echo "$_tmp"
          }

          list_grouped_boj() {
            [ -d baekjoon ] || return 0
            echo "## Baekjoon"
            local found=0

            tmp_dirs="$(find baekjoon -type d -mindepth 2 -maxdepth 2 2>/dev/null | sort_to)"
            while IFS= read -r d; do
              [ -z "${d:-}" ] && continue
              tier="$(echo "$d" | awk -F/ '{print $2}')"
              prob="$(basename "$d")"

              raw_link="$(link_if "$d/raw.c" raw || true)"
              clean_link="$(link_if "$d/clean.c" clean || true)"
              note_link="$(link_if "$d/note.md" note || true)"
              out=""; dot=""
              [ -n "$raw_link" ]   && { out="$raw_link";              dot=" ‚Ä¢ "; }
              [ -n "$clean_link" ] && { out="${out}${dot}$clean_link"; dot=" ‚Ä¢ "; }
              [ -n "$note_link" ]  && { out="${out}${dot}$note_link"; }

              pretty_tier="$(echo "$tier" | sed 's/_/ /g')"
              printf -- "- **[%s](%s)** _(Tier: %s)_ ‚Äî %s\n" "$prob" "$d" "$pretty_tier" "${out:-ÏóÜÏùå}"
              found=1
            done < "$tmp_dirs"
            rm -f "$tmp_dirs"

            tmp_files="$(find baekjoon -type f -mindepth 2 -maxdepth 2 -name '*.c' 2>/dev/null | sort_to)"
            while IFS= read -r f; do
              [ -z "${f:-}" ] && continue
              tier="$(echo "$f" | awk -F/ '{print $2}')"
              pretty_tier="$(echo "$tier" | sed 's/_/ /g')"
              name="$(basename "$f")"
              printf -- "- [%s](%s) _(Tier: %s)_\n" "$name" "$f" "$pretty_tier"
              found=1
            done < "$tmp_files"
            rm -f "$tmp_files"

            [ "$found" -eq 1 ] || echo "- (ÏïÑÏßÅ ÏóÜÏùå)"
            echo
          }

          list_grouped_pgs() {
            [ -d programmers ] || return 0
            echo "## Programmers"
            local found=0

            tmp_dirs="$(find programmers -type d -mindepth 2 -maxdepth 2 2>/dev/null | sort_to)"
            while IFS= read -r d; do
              [ -z "${d:-}" ] && continue
              level="$(echo "$d" | awk -F/ '{print $2}')"
              title="$(basename "$d")"

              raw_link="$(link_if "$d/raw.c" raw || true)"
              clean_link="$(link_if "$d/clean.c" clean || true)"
              note_link="$(link_if "$d/note.md" note || true)"
              out=""; dot=""
              [ -n "$raw_link" ]   && { out="$raw_link";              dot=" ‚Ä¢ "; }
              [ -n "$clean_link" ] && { out="${out}${dot}$clean_link"; dot=" ‚Ä¢ "; }
              [ -n "$note_link" ]  && { out="${out}${dot}$note_link"; }

              pretty_level="$(echo "$level" | sed 's/Level//')"
              printf -- "- **[%s](%s)** _(Level: %s)_ ‚Äî %s\n" "$title" "$d" "$pretty_level" "${out:-ÏóÜÏùå}"
              found=1
            done < "$tmp_dirs"
            rm -f "$tmp_dirs"

            tmp_files="$(find programmers -type f -mindepth 2 -maxdepth 2 -name '*.c' 2>/dev/null | sort_to)"
            while IFS= read -r f; do
              [ -z "${f:-}" ] && continue
              level="$(echo "$f" | awk -F/ '{print $2}')"
              pretty_level="$(echo "$level" | sed 's/Level//')"
              name="$(basename "$f")"
              printf -- "- [%s](%s) _(Level: %s)_\n" "$name" "$f" "$pretty_level"
              found=1
            done < "$tmp_files"
            rm -f "$tmp_files"

            [ "$found" -eq 1 ] || echo "- (ÏïÑÏßÅ ÏóÜÏùå)"
            echo
          }

          list_grouped_swea() {
            [ -d swea ] || return 0
            echo "## SW Expert Academy"
            local found=0

            tmp_dirs="$(find swea -type d -mindepth 2 -maxdepth 2 2>/dev/null | sort_to)"
            while IFS= read -r d; do
              [ -z "${d:-}" ] && continue
              level="$(echo "$d" | awk -F/ '{print $2}')"
              title="$(basename "$d")"

              raw_link="$(link_if "$d/raw.c" raw || true)"
              clean_link="$(link_if "$d/clean.c" clean || true)"
              note_link="$(link_if "$d/note.md" note || true)"
              out=""; dot=""
              [ -n "$raw_link" ]   && { out="$raw_link";              dot=" ‚Ä¢ "; }
              [ -n "$clean_link" ] && { out="${out}${dot}$clean_link"; dot=" ‚Ä¢ "; }
              [ -n "$note_link" ]  && { out="${out}${dot}$note_link"; }

              printf -- "- **[%s](%s)** _(Level: %s)_ ‚Äî %s\n" "$title" "$d" "$level" "${out:-ÏóÜÏùå}"
              found=1
            done < "$tmp_dirs"
            rm -f "$tmp_dirs"

            tmp_files="$(find swea -type f -mindepth 2 -maxdepth 2 -name '*.c' 2>/dev/null | sort_to)"
            while IFS= read -r f; do
              [ -z "${f:-}" ] && continue
              level="$(echo "$f" | awk -F/ '{print $2}')"
              name="$(basename "$f")"
              printf -- "- [%s](%s) _(Level: %s)_\n" "$name" "$f" "$level"
              found=1
            done < "$tmp_files"
            rm -f "$tmp_files"

            [ "$found" -eq 1 ] || echo "- (ÏïÑÏßÅ ÏóÜÏùå)"
            echo
          }

          {
            list_grouped_boj
            list_grouped_pgs
            list_grouped_swea
          } > _AUTO_INDEX.md

          echo "=== _AUTO_INDEX.md ==="
          sed -n '1,120p' _AUTO_INDEX.md || true

      - name: Update README between markers (with marker guard)
        shell: bash
        run: |
          set -euo pipefail

          START="<!-- AUTO-INDEX:START -->"
          END="<!-- AUTO-INDEX:END -->"

          # README ÏóÜÍ±∞ÎÇò ÎπÑÏñ¥ ÏûàÏúºÎ©¥ Í∏∞Î≥∏ Í≥®Í≤© ÏÉùÏÑ±
          if [ ! -s README.md ]; then
            {
              printf "%s\n" "# C Algorithm Study"
              printf "\n"
              printf "%s\n" "## üìö Î¨∏Ï†ú Î™©Î°ù (ÏûêÎèô ÏÉùÏÑ±)"
              printf "%s\n" "$START"
              printf "%s\n" "_ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±Îê©ÎãàÎã§. Î¨∏Ï†ú Ìè¥ÎçîÎßå Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî._"
              printf "%s\n" "$END"
            } > README.md
          fi

          # ÎßàÏª§ Î≥¥Ï†ï(ÏóÜÏúºÎ©¥ ÏÇΩÏûÖ)
          grep -qF "$START" README.md || printf "\n## üìö Î¨∏Ï†ú Î™©Î°ù (ÏûêÎèô ÏÉùÏÑ±)\n%s\n_ÏûêÎèôÏúºÎ°ú ÏÉùÏÑ±Îê©ÎãàÎã§. Î¨∏Ï†ú Ìè¥ÎçîÎßå Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî._\n%s\n" "$START" "$END" >> README.md
          grep -qF "$END"   README.md || echo "$END" >> README.md

          # ÏπòÌôò
          awk -v s="$START" -v e="$END" '
            BEGIN{p=1}
            $0 ~ s { print; system("cat _AUTO_INDEX.md"); p=0; next }
            $0 ~ e { p=1 }
            p { print }
          ' README.md > README.new && mv README.new README.md

          rm -f _AUTO_INDEX.md

      - name: Commit & push if changed
        shell: bash
        run: |
          set -euo pipefail

          git add -A README.md || true
          if git diff --cached --quiet; then
            echo "No README changes to commit."
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit -m "docs(readme): auto-update grouped index"
          git push
